class Solution {
    static class Pair{
        TreeNode node;
        int index;
        Pair(TreeNode node, int index){
            this.node = node;
            this.index = index;
        }
    }

    public int widthOfBinaryTree(TreeNode root) {
        if(root == null) return 0;

        Queue<Pair> q = new LinkedList<>();
        q.add(new Pair(root, 0));
        int width = 0;

        while(!q.isEmpty()){
            int size = q.size();
            int firstIndex = q.peek().index; 
            int lastIndex = q.peek().index; 
            for(int i = 0; i < size; i++){
                Pair p = q.poll();
                lastIndex = p.index;

                if(p.node.left != null) q.add(new Pair(p.node.left, 2 * p.index));
                if(p.node.right != null) q.add(new Pair(p.node.right, 2 * p.index + 1));
            }

            width = Math.max(width, lastIndex - firstIndex + 1);
        }

        return width;
    }
}
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean checkTree(TreeNode root) {
        if((root.left.val+root.right.val)==root.val)   return true;

        return false;
    }
}
/* Node is defined as
class Node{
    int data;
    Node left;
    Node right;
    Node(int data){
        this.data = data;
        left=null;
        right=null;
    }
}*/
class Tree {
    public ArrayList<Integer> diagonal(Node root) {
        // add your code here.
        Queue<Node> q = new LinkedList<>();
        ArrayList<Integer> list = new ArrayList<>();
        if(root==null)  return list;
        q.add(root);
      
        while(!q.isEmpty()){
            Node a = q.poll();
            
            while(a!=null){
                list.add(a.data);
                if(a.left!=null){
                    q.add(a.left);
                }
                a=a.right;
            }
        }
        return list;
    }
}
